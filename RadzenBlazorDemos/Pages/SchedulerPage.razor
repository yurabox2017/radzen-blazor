@page "/scheduler"
@inject DialogService DialogService

<RadzenExample Name="Scheduler" AdditionalSourceCodePages=@(new List<string>() { "AddAppointmentPage.razor", "EditAppointmentPage.razor" })>
	<div class="row">
		<div class="col-xl-6">
			<RadzenScheduler @ref=@scheduler style="height: 768px;" TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
							 TextProperty="Text" SelectedIndex="2" LoadData="ChangeMonthAsync"
							 SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
				<RadzenDayView />
				<RadzenWeekView />
				<RadzenMonthView JobDays=@workDays ShowImages="true" ImgDefault="@VizitDict["Явка"]" VizitTypeDict=@VizitDict />
			</RadzenScheduler>
		</div>
		<div class="col-xl-6">
			<EventConsole @ref=@console />
		</div>
	</div>
</RadzenExample>

@code {
	RadzenScheduler<Appointment> scheduler;
	EventConsole console;
	Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
	private DateTime? curDate;

	private List<DateTime> workDays;

	async Task ChangeMonthAsync(SchedulerLoadDataEventArgs eventArgs)
	{
		if (curDate != scheduler.CurrentDate)
		{
			curDate = scheduler.CurrentDate;
			workDays = Ut.GetWorkDays(curDate.Value, new List<int>() { 2, 6 });

			//	await SetWorkDays(workDays);

			await scheduler.Reload();
		}
	}

	protected override void OnInitialized()
	{
		//workDays = new List<DateTime>() { new DateTime(DateTime.Now.Year,), 5, 9, 12, 16, 28, 30 };

	}

	public static Dictionary<string, string> VizitDict => new Dictionary<string, string>
{
		{"Явка", "Images/check-mark.png"}, {"Болел", "Images/sick.png"}, {"Отсутствовал", "Images/absent.png"},{"BirthDay","Images/check-mark.png"}
	};

	public string[] ExcludeVizitTypes { get => new[] { "Болел", "Отсутствовал" }; }

	IList<Appointment> appointments = new List<Appointment>()
	{
		//new Appointment { Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(12), Text = "Vacation" },
		//new Appointment { Start = DateTime.Today.AddDays(-1), End = DateTime.Today.AddDays(12), Text = "Болел" }
	};
	//{
	//    new Appointment { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Text = "BirthDay" },
	//    new Appointment { Start = DateTime.Today.AddDays(-11), End = DateTime.Today.AddDays(-10), Text = "Day off" },
	//    new Appointment { Start = DateTime.Today.AddDays(-10), End = DateTime.Today.AddDays(-8), Text = "Work from home" },
	//    new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(12), Text = "Online meeting" },
	//    new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(13), Text = "Skype call" },
	//    new Appointment { Start = DateTime.Today.AddHours(14), End = DateTime.Today.AddHours(14).AddMinutes(30), Text = "Dentist appointment" },
	//    new Appointment { Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(12), Text = "Vacation" },
	//    };

	async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
	{
		console.Log($"SlotSelect: Start={args.Start} End={args.End}");

		Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
		new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

		if (data != null)
		{
			appointments.Add(data);
			// Either call the Reload method or reassign the Data property of the Scheduler
			await scheduler.Reload();
		}
	}

	async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
	{
		console.Log($"AppointmentSelect: Appointment={args.Data.Text}");

		await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", args.Data } });

		await scheduler.Reload();
	}

	void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
	{
		// Never call StateHasChanged in AppointmentRender - would lead to infinite loop

		if (args.Data.Text == "Birthday")
		{
			args.Attributes["style"] = "background: red";
		}
	}
}