<Project Sdk="Microsoft.NET.Sdk.Razor">
  <PropertyGroup>
    <NoWarn>BL9993</NoWarn>
    <TargetFrameworks>net5.0</TargetFrameworks>
    <RazorLangVersion>3.0</RazorLangVersion>
    <LangVersion>7.3</LangVersion>
    <OutputType>Library</OutputType>
    <IsPackable>true</IsPackable>
    <PackageId>Radzen.Blazor</PackageId>
    <Product>Radzen.Blazor</Product>
    <Version>3.9.44</Version>
    <Copyright>Radzen Ltd.</Copyright>
    <Authors>Radzen Ltd.</Authors>
    <Description>Native Blazor UI components by Radzen Ltd.</Description>
    <PackageTags>blazor blazor-component blazor-grid blazor-datagrid</PackageTags>
    <PackageProjectUrl></PackageProjectUrl>
    <PackageIcon>icon.png</PackageIcon>
    <PackageLicenseFile></PackageLicenseFile>
    <Title>Radzen Components for Blazor</Title>
    <RepositoryUrl>https://github.com/yurabox2017/radzen-blazor</RepositoryUrl>
    <GeneratePackageOnBuild>False</GeneratePackageOnBuild>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetFramework)' == 'net5.0'">
    <DefineConstants>NET5</DefineConstants>
  </PropertyGroup>
  <ItemGroup>
    <None Remove="LICENSE.txt" />
    <None Remove="LICENSE.txt" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Components" Condition="'$(TargetFramework)' == 'netstandard2.1'" Version="3.1.0" />
    <PackageReference Include="Microsoft.AspNetCore.Components.Web" Condition="'$(TargetFramework)' == 'netstandard2.1'" Version="3.1.0" />
    <PackageReference Include="Microsoft.AspNetCore.Components" Condition="'$(TargetFramework)' == 'net5.0'" Version="5.0.0" />
    <PackageReference Include="Microsoft.AspNetCore.Components.Web" Condition="'$(TargetFramework)' == 'net5.0'" Version="5.0.0" />
    <PackageReference Include="Microsoft.CSharp" Version="4.7.0" />
    <PackageReference Include="System.Linq.Dynamic.Core" Version="1.2.12" />
  </ItemGroup>

  <ItemGroup>
      <None Include="icon.png" Pack="true" PackagePath="" />
  </ItemGroup>

  <ItemGroup>
      <EmbeddedResource Include="LinkerConfig.xml">
        <LogicalName>$(MSBuildProjectName).xml</LogicalName>
      </EmbeddedResource>
  </ItemGroup>
  
  <UsingTask TaskName="RemoveSourceMap" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          foreach (var file in Directory.EnumerateFiles("./wwwroot/css", "*.css"))
          {
              File.WriteAllText(file, File.ReadAllText(file).Replace("/*# sourceMappingURL=themes" + Path.DirectorySeparatorChar + Path.GetFileName(file) + ".map */", ""), Encoding.UTF8);
          }
        ]]>
      </Code>
    </Task>
  </UsingTask>
  
  <Target Name="ToolRestore" BeforeTargets="PreBuildEvent">
    <Exec Command="dotnet tool restore" StandardOutputImportance="high" />
  </Target>
  <Target Name="PreBuild" AfterTargets="ToolRestore">
    <Exec Command="dotnet tool run webcompiler -r themes -o wwwroot/css -z disable -m disable -p disable" StandardOutputImportance="high" />
    <ItemGroup>
      <CssFiles Include="$(MSBuildProjectDirectory)\themes\*.css" />
    </ItemGroup>
    <ItemGroup>
      <BootstrapFiles Include="$(MSBuildProjectDirectory)\wwwroot\css\bootstrap\**\*.*" />
    </ItemGroup>
    <Delete Files="@(CssFiles)" />
    <Delete Files="@(BootstrapFiles)" />
    <RemoveDir Directories="$(MSBuildProjectDirectory)\wwwroot\css\bootstrap" />
    <RemoveSourceMap />
  </Target>
</Project>